TITLE:: SoundFileAnalysis
summary:: A simple system for non realtime soundfile analysis
categories::Non-Realtime, Files


DESCRIPTION::
This class provides a relatively simple way to do custom non realtime signal analysis. Using live recorded buffers, it can do the processing in the background while the recording continues. Its input is a soundfile, its output is a dataset formatted as an event.

(be aware that by default sound files are only analysed for n*serverOptions.blockSize<SoundFile.duration please look at the trimDuration argument for details.)

A simple example:

CODE::
(
a = SoundFileAnalysis.new;
// add some custom sound analysis method
a.add(\amplitude, \trig, { |sig|
	var amp = Amplitude.kr(sig);
	var trig = amp > 0.6; // amp exceeds threshold
	var avg = TrigAvg.kr(amp, trig);
	[trig, avg] // records always the average before the peak
});

x = a.analyzeFile(Platform.resourceDir +/+ "sounds/a11wlk01.wav", callback: { "analysis completed".postln; });
)

x[\amplitude].plot; // plot the average amplitudes
::



CLASSMETHODS::


METHOD::verbose

Post what's going on (default: false).

METHOD::new

Return a new link::Classes/SoundFileAnalysis:: Object

METHOD::initAnalysisMethods

Return a function with a dictionary of basic analysis methods (trig, average, direct).

METHOD::basicAnalysisMethods
A dictionary with the tree keys: \trig, \average, \direct.
This dictionary (basicAnalysisMethods) can be extended.

definitionlist::
## trig
|| Write a value on receiveing a trigger

## average
|| Average all values in the file


## direct
|| Write a value on each frame

::




INSTANCEMETHODS::

METHOD::add

Add a new analysis method

ARGUMENT::name

Name for the method (a link::Classes/Symbol::)

ARGUMENT::type

One of currently three types:

definitionlist::
## trig
|| Write one or more values on receiveing a trigger

## direct
|| Write a value on each frame

## average
|| Average all values in the file

::


ARGUMENT::ugenFunc

A function that returns a UGen graph. It takes the sound signal and the soundfile object as arguments.

METHOD::analysisMethods

Returns a dictionary of functions of currently defined methods.



METHOD::analyzeFile

Analyze a sound file, using the defined analysis methods. This method returns an link::Classes/Event:: with the following information:
definitionlist::
## ~fileName, ~path, ~fileNumChannels
|| path and sound file information

## ~analysisStart, ~analysisDuration
|| What part of the file was analyzed

## ~dataDimensions
|| The results, each resulting from an analysis method (an link::Classes/Event::)

## ~dataTable
|| The above results ordered as a multidimensional array

::


ARGUMENT::path

Path to the soundfile

ARGUMENT::start

Start frame index for analysis

ARGUMENT::duration

Analysis duration in seconds

ARGUMENT::which

Which methods to use (an array of names as symbols). If none is given, use all.

ARGUMENT::callback

A function that is called when analysis is completed. It takes the result (an event) as argument.

ARGUMENT::maxDataPoints

A limit on the number of points added to the data.

ARGUMENT::trimDuration

When code::trimDuration:: is unspecified, the duration is no longer than the length of the file. Because only full blocks are written to the buffer, usually the last samples of a file are not analysed. Setting code::trimDuration:: allows you to specify what is supposed to happen with the last block or leaves the duration be as specified in the argument.

\roundDown analyses the file until the full last block.

\roundUp analyses the file and adds silence to fill the last block.

nil leaves the duration as given in the argument.

ARGUMENT::serverOptions

link::Classes/ServerOptions:: for the NRT server. A way to deal with the last half block problem is to set the blockSize to 1.



METHOD::analyzeAll

Analyze all files given, returning a link::Classes/List:: of link::Classes/Event::s.

ARGUMENT::paths

A list of paths





EXAMPLES::
CODE::
s.boot;

// record a sound into a buffer
b = Buffer.alloc(s, s.sampleRate * 3, 1, bufnum: 1000);

(
SynthDef(\record, {|out|
	var in, rec;
	in = RLPF.ar(LFSaw.ar(300 * SinOsc.kr(0.4).range(0.5, 5)), Line.kr(12000, 100, 3));
	rec = RecordBuf.ar(in, b.bufnum, loop: 0, doneAction: 2);
	Out.ar(out, in);
};
).add
)

Synth(\record);

// write the file to analyze later
b.write("~/soundFileAnalysisExample.aiff".standardizePath,"aiff", "int24");

b.play; // maybe check if something is there

// initialize analysis
(
a = SoundFileAnalysis.new;

a.add(\centroid, \trig, {|sig|
	var fft = FFT(LocalBuf(2048, 1), sig);
	var x = SpecCentroid.kr(fft);
	[Impulse.kr(5), x]
});
a.add(\crest, \average, {|sig, soundfile| Crest.kr(sig, soundfile.numFrames) });
a.add(\amplitude, \direct, {|sig| Amplitude.kr(sig); });
)

// analyze the sound

x = a.analyzeFile("~/soundFileAnalysisExample.aiff".standardizePath, duration: 3, maxDataPoints: 3000, callback: {"done!".postln;});

// look at the data
x[\centroid].postcs;
x[\crest].postcs;
x[\amplitude].postcs;


// BONUS: how to tweak the analysis methods
(
Ndef(\centroid, {
	var sig = RLPF.ar( LFSaw.ar(300 * SinOsc.kr(0.4).range(0.5, 5)), Line.kr(12000, 300, 3));
	var fft = FFT(LocalBuf(2048, 1), sig);
	var x = SpecCentroid.kr(fft);
	x.poll(10);
	sig;
}).play;
)
::

SECTION::Live audio analysis
CODE::



(

a = SoundFileAnalysis.new;

a.add(\onsets, \trig, {|sig|
	var fft = FFT(LocalBuf(2048, 1), sig);
	var x = Onsets.kr(fft); // if needed, adjust analysis
	var currentTime = Sweep.kr(1, 1); // time in seconds
	[x, currentTime]
});

)

~analyzed = (); // a dictionary to keep several analysis data sets

// record into a 3 second live buffer
~liveBuffer = Buffer.alloc(s, s.sampleRate * ~dur, 3);
Ndef(\rec, { RecordBuf.ar(SoundIn.ar([0, 1]), ~liveBuffer, loop:1) });

// hit cmd-period to stop recording, or Ndef(\rec).free;
// for restarting the recording, call Ndef(\rec).send;

(

SynthDef(\playchunk, { |out, bufnum, sustain = 1, amp = 0.1, rate = 1, onset = 0|
	var startPos = onset * BufSampleRate.kr(bufnum); // convert from seconds to frames
	var env = EnvGen.kr(Env.linen(0.001, sustain / rate, 0.02), doneAction:2);
	Out.ar(out,
		PlayBuf.ar(2, bufnum, rate, startPos:startPos)
	)
}).add;

~analyze = { |name = 0|
	var path;
	fork {
		path = "~/analysis_%.aiff".format(name).standardizePath;
		~liveBuffer.write(path); // write soundfile as a copy
		s.sync;
		x = a.analyzeFile(path, callback: { "analysed buffer, saved in index %".format(name).postln;});
		x[\buffer] = Buffer.read(s, path); // read soundfile
		~analyzed[name] = x;

	};
};

~makeEvents = { |name, func|
	var analysis = ~analyzed[name], buffer, onsets, durations, events;
	if(analysis.isNil) { "analysis file not found".postln } {
		buffer = analysis[\buffer];
		onsets = analysis[\onsets];
		durations = onsets.differentiate.drop(1);
		durations = durations.add(buffer.duration - onsets.last);
		events = onsets.collect { |time, i|
			(
				onset:time,
				bufnum: buffer,
				dur: durations[i],
				sustain: durations[i],
				rate: 1,
				instrument:\playchunk
			)
		};
	};


};
~freeAllBuffers = {
	~analyzed.do { |x| x[\buffer].free };
};
~writeToFiles = { |name, path|
	~makeEvents.value(name).do { |x, i|
		var buffer = x[\bufnum];
		var filepath = format("%_%_%.aiff", path, name, i).standardizePath;
		buffer.write(filepath, numFrames:x[\sustain] * buffer.sampleRate, startFrame:x[\onset] * buffer.sampleRate)
	}
};
)

~analyzed[0].buffer.play; // something there?
~analyzed[0][\onsets]; // post onsets
~events = ~makeEvents.(0); // generate events
~events.choose.play; // play a random one


// play back as a pattern
Pbindf(Pseq(~events.(0), inf), \rate, 1).play;
Pbindf(Pseq(~events.(0), inf), \rate, 2, \dur, 1.4).play;


// if you need, write to files
~writeToFiles.(0, "~/test");

// free all
~freeAllBuffers.value;

::





SECTION::Tests
CODE::
(
a = SoundFileAnalysis.new;

a.add(\onsets, \trig, { |sig|
	var fft = FFT(LocalBuf(512, 1), sig);
	Onsets.kr(fft)
});
a.add(\fftcrest, \average, { |sig|
	FFTCrest.kr(FFT(LocalBuf(2048, 1), sig))
});

a.add(\slope, \average, { |sig|
	FFTSlope.kr(FFT(LocalBuf(2048, 1), sig))
});
a.add(\amplitude, \average, { |sig|
	Amplitude.kr(sig)
});

a.add(\test, \trig, { |sig|
	[Impulse.kr(2), 1, 2, 3]
});

a.add(\test2, \direct, { |sig|
	//DC.kr([10, 20, 30])
	Phasor.kr(0, 1, 1, inf);
});

a.add(\test3, \direct, { |sig|
	Phasor.ar(0, [10, 1], 1, inf);
});
);

// analyze single files
x = a.analyzeFile(Platform.resourceDir +/+ "sounds/a11wlk01.wav", callback: { "analysis completed".postln }, maxDataPoints: 6000);
x.postcs;"";
x[\test];
x[\test2].cs;
x[\test3].cs;
x[\test].as(Array).shape
x[\crest];
x[\onsets];


::
