TITLE:: SoundFileAnalysis
summary:: A simple system for non realtime soundfile analysis
categories::Non-Realtime


DESCRIPTION::


CLASSMETHODS::

INSTANCEMETHODS::

METHOD::verbose

Post what's going on.

ARGUMENT::boolean

gets True or False (a link::Classes/Boolean::

METHOD::add

Add a new analysis method

ARGUMENT::name

Name for the method (a link::Classes/Symbol::)

ARGUMENT::type

One of currently three types:

definitionlist::
## trig
|| Write a value on receiveing a trigger

## direct
|| Write a value on each frame

## average
|| Average all values in the file

::


ARGUMENT::ugenFunc

A function that returns a UGen graph. It takes the sound signal and the soundfile object as arguments.


METHOD::analysisMethods

Returns a dictionary of functions of currently defined methods.



METHOD::analyzeFile

Analyze a sound file, using the defined analysis methods. This method returns an link::Classes/Event:: with the following information:
definitionlist::
## ~fileName, ~path, ~fileNumChannels
|| path and sound file information

## ~analysisStart, ~analysisDuration
|| What part of the file was analyzed

## ~dataDimensions
|| The results, each resulting from an analysis method (an link::Classes/Event::)

## ~dataTable
|| The above results ordered as a multidimensional array

::


ARGUMENT::path

Path to the soundfile

ARGUMENT::start

Start frame index for analysis

ARGUMENT::duration

Analysis duration in seconds

ARGUMENT::which

Which methods to use (an array of names as symbols). If none is given, use all.

ARGUMENT::callback

A function that is called when analysis is completed. It takes the result (an event) as argument.

ARGUMENT::maxDataPoints

A limit on the number of points added to the data.


METHOD::analyzeAll

Analyze all files given, returning a link::Classes/List:: of link::Classes/Event::s.

ARGUMENT::paths

A list of paths


EXAMPLES::


SECTION::Tests
CODE::
(
a = SoundFileAnalysis.new;

a.add(\onsets, \trig, { |sig|
	var fft = FFT(LocalBuf(512, 1), sig);
	Onsets.kr(fft)
});
a.add(\fftcrest, \average, { |sig|
	FFTCrest.kr(FFT(LocalBuf(2048, 1), sig))
});

a.add(\slope, \average, { |sig|
	FFTSlope.kr(FFT(LocalBuf(2048, 1), sig))
});
a.add(\amplitude, \average, { |sig|
	Amplitude.kr(sig)
});

a.add(\test, \trig, { |sig|
	[Impulse.kr(2), 1, 2, 3]
});

a.add(\test2, \direct, { |sig|
	//DC.kr([10, 20, 30])
	Phasor.kr(0, 1, 1, inf);
});

a.add(\test3, \direct, { |sig|
	Phasor.ar(0, [10, 1], 1, inf);
});
);

// analyze single files
x = a.analyzeFile(Platform.resourceDir +/+ "sounds/a11wlk01.wav", callback: { "analysis completed".postln }, maxDataPoints: 6000);
x.postcs;"";
x[\test];
x[\test2].cs;
x[\test3].cs;
x[\test].as(Array).shape
x[\crest];
x[\onsets];


::
